import type { Metadata } from "next";
import { Cairo, Geist, Geist_Mono, Inter } from "next/font/google";
import "./globals.css";

import { hasLocale } from 'next-intl';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';

import { getLangDir } from 'rtl-detect';
import AppProvider from "@/providers/appProvider";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap'
})

const cairo = Cairo({
  subsets: ['arabic'],
  variable: '--font-cairo',
  display: 'swap',
  weight: ['400', '600', '700']
})
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;


  const messages = (await import(`@/i18n/messages/${locale}.json`)).default;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }
  const direction = getLangDir(locale);

  console.log(messages, locale, "sh");

  return (
    <html lang={locale} dir={direction} suppressHydrationWarning className={`${inter.variable} ${cairo.variable}`} >
      <body
        className={`${inter.className} antialiased `}
      >
        <main className={`lg:pt-20 ${locale === 'ar' ? 'font-arabic' : 'font-english'}`}>
          <AppProvider locale={locale} messages={messages}>

            {children}
          </AppProvider>
        </main>
      </body>
    </html>
  );
}